/******************************************************************/
/*** ColorLib - Color graphic library for fx-CG 20 - fx-CG 10	***/
/*** ColorLib is a free software								***/
/***															***/
/*** @author Lancelot											***/
/***															***/
/*** @file ColorLib.c											***/
/*** Include header for ColorLib								***/
/***															***/
/*** @date 25 october 2013										***/
/*** version 0.97												***/
/******************************************************************/

 
#ifndef COLORLIB
#define COLORLIB


/****************************************************/
/** uncomment #define of functions you want to use **/
/****************************************************/

#define CL_ALL //Auto define all functions

/** graphic functions: **/
// #define CL_PIXEL
// #define CL_PIXEL_ALPHA
// #define CL_POINT_ALPHA
// #define CL_GET_PIXEL
// #define CL_LINE
// #define CL_VERTICAL_LINE
// #define CL_HORIZONTAL_LINE
// #define CL_FILLVRAM
// #define CL_CIRCLE
// #define CL_FILLED_CIRCLE
// #define CL_FILLED_ALPHA_CIRCLE
// #define CL_DISCUS
// #define CL_POLY
// #define CL_FILLED_POLYGON
// #define CL_FILLED_RECTANGLE


/** display sprite functions: **/
// #define CL_ALPHASPRITE
// #define CL_SPRITE16
// #define CL_SPRITE

/** text functions: **/
// #define CL_TEXT

/**************************/
/** Useful Constants     **/
/**************************/

#define LCD_WIDTH_PX 384
#define LCD_HEIGHT_PX 216
//#define VRAM 0xA8000000
//#define VRAM_ADRESS 0xA8000000



/**************************/
/** Flags                **/
/**************************/

// Font flags :
#define abs(a) ((a) < 0 ? -(a) : (a))
#define min(a,b) (((a) < (b))? (a) : (b))
#define max(a,b) (((a) > (b))? (a) : (b))
#define sgn(a) ((a) < 0 ? (-1) : (a) > 0 ? (1) : (a))


/**************************/
/** Structures           **/
/**************************/

/*
typedef struct {
    char* data;
    int width, height, flags;
} font;


#define MONOSPACE    0x00000001
#define ANTIALIASING 0x00000002

const static char default_data[] = {
	0,0,0,0,0,           // ' '
	128,128,128,0,128,   // '!'
	160,160,0,0,0,       // '"'
	80,248,80,248,80,    // '#'
	64,224,64,224,64,    // '$'
	200,208,32,88,152,   // '%'
	0,96,64,144,96,      // '&'
	128,128,0,0,0,       // '''
	64,128,128,128,64,   // '('
	128,64,64,64,128,    // ')'
	64,224,64,160,0,     // '*'
	32,32,248,32,32,     // '+'
	0,0,0,128,128,       // ','
	0,0,248,0,0,         // '-'
	0,0,0,0,128,       // '.'
	8,16,32,64,128,      // '/'
	248,136,136,136,248, // '0'
	192,64,64,64,64,     // '1'
	240,16,240,128,240,  // '2'
	240,16,112,16,240,   // '3'
	128,136,136,248,8,   // '4'
	248,128,248,8,248,   // '5'
	248,128,248,136,248, // '6'
	248,8,8,8,8,         // '7'
	248,136,248,136,248, // '8'
	248,136,248,8,248,   // '9'
	0,0,128,0,128,       // ':'
	0,128,0,128,128,     // ';'
	32,64,128,64,32,     // '<'
	0,248,0,248,0,       // '='
	128,64,32,64,128,    // '>'
	224,16,96,0,64,      // '?'
	248,136,184,168,184, // '@'
	248,136,248,136,136, // 'A'
	240,136,248,136,240, // 'B'
	248,128,128,128,248, // 'C'
	240,136,136,136,240, // 'D'
	248,128,240,128,248, // 'E'
	248,128,240,128,128, // 'F'
	120,128,184,136,120, // 'G'
	136,136,248,136,136, // 'H'
	128,128,128,128,128, // 'I'
	16,16,16,144,96,     // 'J'
	136,144,224,144,136, // 'K'
	128,128,128,128,248, // 'L'
	136,216,168,136,136, // 'M'
	248,136,136,136,136, // 'N'
	248,136,136,136,248, // 'O'
	248,136,248,128,128, // 'P'
	112,136,136,152,120, // 'Q'
	248,136,248,144,136, // 'R'
	248,128,248,8,248,   // 'S'
	248,32,32,32,32,     // 'T'
	136,136,136,136,248, // 'U'
	136,136,80,80,32,    // 'V'
	168,168,168,168,248, // 'W'
	136,80,32,80,136,    // 'X'
	136,80,32,32,32,     // 'Y'
	248,8,112,128,248,   // 'Z'
	192,128,128,128,192, // '['
	128,64,32,16,8,      // '\'
	192,64,64,64,192,    // ']'
	64,160,0,0,0,        // '^'
	0,0,0,0,248,         // '_'
	128,64,0,0,0,        // '`'
	0,112,144,144,112,   // 'a'
	128,224,144,144,224, // 'b'
	0,96,128,128,96,     // 'c'
	16,112,144,144,112,  // 'd'
	96,144,240,128,112,  // 'e'
	48,64,224,64,64,     // 'f'
	112,144,112,16,224,  // 'g'
	128,128,224,144,144, // 'h'
	128,0,128,128,128,   // 'i'
	64,0,64,64,128,      // 'j'
	128,128,160,192,160, // 'k'
	128,128,128,128,128, // 'l'
	0,0,240,168,168,     // 'm'
	0,0,224,144,144,     // 'n'
	0,96,144,144,96,     // 'o'
	0,240,144,240,128,   // 'p'
	0,240,144,240,16,    // 'q'
	0,176,192,128,128,   // 'r'
	0,112,64,32,224,     // 's'
	0,128,224,128,96,    // 't'
	0,0,144,144,96,      // 'u'
	0,0,136,80,32,       // 'v'
	0,0,168,168,80,      // 'w'
	0,0,144,96,144,      // 'x'
	0,160,224,32,192,    // 'y'
	0,240,32,64,240,     // 'z'
	96,64,192,64,96,     // '{'
	128,128,128,128,128, // '|'
	192,64,96,64,192,    // '}'
	0,0,80,160,0         // '~'
};

static Font default_font = {default_data, 8, 8, 0}; 

//error: unknown type name 'Font'*/


/**************************/
/** Functions prototypes **/
/**************************/
// text functions prototypes:
//void text_setFont(Font* font);  error: unknown type name 'Font'
//Font* text_getActualFont();  error: unknown type name 'Font'
void text_printC(int x, int y, char c, int size, int color);
void text_print(int x, int y, char* c, int size, int color);
int text_widthC(char c);
int text_width(char* c);

// graphic functions prototypes:
void CL_Pixel(int x, int y, unsigned short color);
//SetPixelAlpha(int x, int y, color_t color, char alpha); error: unknown type name 'color_t'
void CL_PointAlpha(int x, int y, int size, int color, int alpha);
short CL_Getpixel(short x, short y);
void CL_Line(int xi, int yi, int xf, int yf, unsigned short color);
void CL_Vertical_Line(int x, int y1, int y2, unsigned short color);
void Cl_Horizontal_Line(int x1, int x2, int y, unsigned short color);
void CL_FillVRAM(short color);
void CL_circle(int x0, int y0, int rayon, int couleur);
void CL_FilledCircle(short x, short y, short rayon, int couleur);
void CL_FilledCircleAlpha(short x, short y, short rayon, int couleur, int alpha);
void CL_Discus(int x0, int y0, int rayon, int couleur);
void CL_drawPoly(int xy[], int points, int color);
int CL_Filled_polygon_quicksord_partition(int *t, int p, int r);
void CL_Filled_polygon_quicksord(int* t, int p, int r);
void CL_Filled_polygon(const int *x, const int *y, int nb_vertices, unsigned short color);
void CL_Filled_Rectangle( int xi, int yi, int xi2, int yi2, unsigned short color);

// display sprite functions:
void CL_bmp_alpha(int x, int y, int width, int height, short* bitmap, short alpha);
void CL_bmp_masked(short* bitmap, int x, int y, int width, int height, short mask);
void CL_bmp_masked_nbit(const unsigned char* data, int x, int y, int width, int height, const short* palette, short maskColor, unsigned int bitwidth);

#endif // COLORLIB

